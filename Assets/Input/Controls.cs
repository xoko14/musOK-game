//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""e19a6e29-fdad-4cd5-a477-c858b7393b1e"",
            ""actions"": [
                {
                    ""name"": ""MoveHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""505b36b0-5008-481b-a9b1-5946cef4c0e8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""6e200050-d5be-42a2-aae2-1daefa87f6fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BTA"",
                    ""type"": ""Button"",
                    ""id"": ""3e3e548f-ec0a-4eaf-994f-8c3e3064ae05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BTB"",
                    ""type"": ""Button"",
                    ""id"": ""69b2d164-a7f2-40eb-8ac1-fa8982fff30e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BTC"",
                    ""type"": ""Button"",
                    ""id"": ""7e88672a-7873-4aef-b17f-83b4793d9b1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BTL"",
                    ""type"": ""Button"",
                    ""id"": ""7dadd9ce-1bd4-42a9-a13e-0aa2be7c1ab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BTR"",
                    ""type"": ""Button"",
                    ""id"": ""63d1f4dc-8e6b-4048-a437-d39a7277746f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""8481e3b5-4772-4927-a851-94a05f360c3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e96977f8-6361-4af8-b1b0-039d497b5d2f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a2bc6f-4a60-4f90-93c5-91bf7c17f48f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7903ad49-2031-4f95-b535-225720fa660f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BTA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f52b4ebe-1722-4e54-8fa0-1dc092bcbf73"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BTB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1943cc9d-01b2-4a4f-aebf-8ab98de8636f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BTC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8132a43-587f-4ea7-b456-474cfff56236"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BTL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c578efe-266b-45cc-b2ca-90b17338b85f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BTR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c097f938-7376-49b6-9e13-b7e6ef44d841"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveHorizontal = m_Gameplay.FindAction("MoveHorizontal", throwIfNotFound: true);
        m_Gameplay_Click = m_Gameplay.FindAction("Click", throwIfNotFound: true);
        m_Gameplay_BTA = m_Gameplay.FindAction("BTA", throwIfNotFound: true);
        m_Gameplay_BTB = m_Gameplay.FindAction("BTB", throwIfNotFound: true);
        m_Gameplay_BTC = m_Gameplay.FindAction("BTC", throwIfNotFound: true);
        m_Gameplay_BTL = m_Gameplay.FindAction("BTL", throwIfNotFound: true);
        m_Gameplay_BTR = m_Gameplay.FindAction("BTR", throwIfNotFound: true);
        m_Gameplay_Esc = m_Gameplay.FindAction("Esc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_MoveHorizontal;
    private readonly InputAction m_Gameplay_Click;
    private readonly InputAction m_Gameplay_BTA;
    private readonly InputAction m_Gameplay_BTB;
    private readonly InputAction m_Gameplay_BTC;
    private readonly InputAction m_Gameplay_BTL;
    private readonly InputAction m_Gameplay_BTR;
    private readonly InputAction m_Gameplay_Esc;
    public struct GameplayActions
    {
        private @Controls m_Wrapper;
        public GameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveHorizontal => m_Wrapper.m_Gameplay_MoveHorizontal;
        public InputAction @Click => m_Wrapper.m_Gameplay_Click;
        public InputAction @BTA => m_Wrapper.m_Gameplay_BTA;
        public InputAction @BTB => m_Wrapper.m_Gameplay_BTB;
        public InputAction @BTC => m_Wrapper.m_Gameplay_BTC;
        public InputAction @BTL => m_Wrapper.m_Gameplay_BTL;
        public InputAction @BTR => m_Wrapper.m_Gameplay_BTR;
        public InputAction @Esc => m_Wrapper.m_Gameplay_Esc;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @MoveHorizontal.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveHorizontal;
                @MoveHorizontal.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveHorizontal;
                @MoveHorizontal.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveHorizontal;
                @Click.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnClick;
                @BTA.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTA;
                @BTA.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTA;
                @BTA.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTA;
                @BTB.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTB;
                @BTB.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTB;
                @BTB.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTB;
                @BTC.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTC;
                @BTC.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTC;
                @BTC.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTC;
                @BTL.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTL;
                @BTL.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTL;
                @BTL.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTL;
                @BTR.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTR;
                @BTR.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTR;
                @BTR.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBTR;
                @Esc.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnEsc;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveHorizontal.started += instance.OnMoveHorizontal;
                @MoveHorizontal.performed += instance.OnMoveHorizontal;
                @MoveHorizontal.canceled += instance.OnMoveHorizontal;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @BTA.started += instance.OnBTA;
                @BTA.performed += instance.OnBTA;
                @BTA.canceled += instance.OnBTA;
                @BTB.started += instance.OnBTB;
                @BTB.performed += instance.OnBTB;
                @BTB.canceled += instance.OnBTB;
                @BTC.started += instance.OnBTC;
                @BTC.performed += instance.OnBTC;
                @BTC.canceled += instance.OnBTC;
                @BTL.started += instance.OnBTL;
                @BTL.performed += instance.OnBTL;
                @BTL.canceled += instance.OnBTL;
                @BTR.started += instance.OnBTR;
                @BTR.performed += instance.OnBTR;
                @BTR.canceled += instance.OnBTR;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMoveHorizontal(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnBTA(InputAction.CallbackContext context);
        void OnBTB(InputAction.CallbackContext context);
        void OnBTC(InputAction.CallbackContext context);
        void OnBTL(InputAction.CallbackContext context);
        void OnBTR(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
    }
}
